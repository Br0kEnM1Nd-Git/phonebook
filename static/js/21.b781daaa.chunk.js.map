{"version":3,"file":"static/js/21.b781daaa.chunk.js","mappings":"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","sources":["components/PhonebookList/PhonebookFilter.jsx","components/PhonebookList/ContactsItem.jsx","components/PhonebookList/visibleContactsMap.js","components/PhonebookList/PhonebookList.jsx","webpack://react-homework-template/./src/components/PhonebookForm/PhonebookForm.module.scss?5840","components/PhonebookForm/PhonebookForm.jsx","pages/Home/index.jsx","store/selectors.js","webpack://react-homework-template/./src/components/PhonebookList/Phonebook.module.scss?2088"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport debounce from 'lodash.debounce';\nimport { changeFilterAction } from 'store/filterSlice';\nimport styles from './Phonebook.module.scss'\n\nconst PhonebookFilter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const value = e.target.value;\n    dispatch(changeFilterAction(value));\n  };\n\n  return (\n    <form className={styles.filterForm}>\n      <label htmlFor=\"filter\">Find contacts:</label>\n      <input\n        type=\"text\"\n        name=\"filter\"\n        id=\"filter\"\n        onChange={debounce(e => handleChange(e), 200)}\n        autoComplete=\"off\"\n      />\n    </form>\n  );\n};\n\nexport default PhonebookFilter;\n","import { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'store/contactsSlice';\n\nconst ContactsItem = ({ contact: { id, name, phone } }) => {\n  const dispatch = useDispatch();\n  const deleteContact = () => dispatch(deleteContactThunk(id));\n\n  return (\n    <li>\n      <span>\n        {name}: {phone}\n      </span>\n      <button onClick={deleteContact}>Delete</button>\n    </li>\n  );\n};\n\nexport default ContactsItem;\n","import ContactsItem from 'components/PhonebookList/ContactsItem';\n\nconst visibleContactsMap = (visibleContacts, recent = false) => {\n  if (recent) {\n    const sliceLength = visibleContacts.length - 5;\n    const recentContacts = visibleContacts.slice(sliceLength);\n    return recentContacts.map(contact => {\n      return <ContactsItem contact={contact} key={contact.id} />;\n    });\n  }\n  return visibleContacts.map(contact => {\n    return <ContactsItem contact={contact} key={contact.id} />;\n  });\n};\n\nexport default visibleContactsMap;\n","import { useSelector } from 'react-redux';\nimport {\n  selectErrorContacts,\n  selectFilter,\n  selectIsLoadingContacts,\n  selectVisibleContacts,\n} from 'store/selectors';\nimport styles from './Phonebook.module.scss';\nimport visibleContactsMap from './visibleContactsMap';\n\nexport const PhonebookList = ({ recent = false }) => {\n  const visibleContacts = useSelector(selectVisibleContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectIsLoadingContacts);\n  const error = useSelector(selectErrorContacts);\n  return (\n    <>\n      {recent && !filter && <h2>Recent contacts</h2>}\n      <ul className={styles.contactsList}>\n        {isLoading ? (\n          <p>Loading...</p>\n        ) : error ? (\n          <p>{error}</p>\n        ) : filter ? (\n          visibleContactsMap(visibleContacts)\n        ) : (\n          visibleContactsMap(visibleContacts, recent)\n        )}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactsForm\":\"PhonebookForm_contactsForm__1hcL0\"};","import { useDispatch, useSelector } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport { selectContacts } from 'store/selectors';\nimport { addContactThunk } from 'store/contactsSlice';\nimport styles from './PhonebookForm.module.scss';\n\nconst PhonebookForm = () => {\n  const { contacts } = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const createContact = e => {\n    e.preventDefault();\n    const form = e.target;\n    const name = form.name.value;\n    const phone = form.number.value;\n    const phoneClear = phone.replace(/[\\s-]+/g, '');\n\n    if (phoneClear.length >= 15)\n      return Notiflix.Notify.warning(`Phone number is too big!`);\n\n    const isNew = contacts.every(el => {\n      if (el.phone === phone) return false;\n      return true;\n    });\n\n    if (!isNew)\n      return Notiflix.Notify.warning(\n        `This phone number is already in contacts!`\n      );\n\n    const isNumber = Number(phoneClear);\n    if (!isNumber) return Notiflix.Notify.warning(`Enter correct number!`);\n\n    form.reset();\n\n    const newContact = {\n      name,\n      phone,\n    };\n\n    dispatch(addContactThunk(newContact));\n  };\n\n  return (\n    <form className={styles.contactsForm} onSubmit={createContact}>\n      <label htmlFor=\"name\">Name</label>\n      <input type=\"text\" name=\"name\" id=\"name\" required autoComplete=\"name\" />\n      <label htmlFor=\"number\">Number</label>\n      <input type=\"tel\" name=\"number\" id=\"number\" required autoComplete=\"tel\" />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default PhonebookForm;\n","import PhonebookForm from 'components/PhonebookForm/PhonebookForm';\nimport PhonebookFilter from 'components/PhonebookList/PhonebookFilter';\nimport { PhonebookList } from 'components/PhonebookList/PhonebookList';\nimport { useDispatch } from 'react-redux';\nimport { changeFilterAction } from 'store/filterSlice';\n\nconst Home = () => {\n  const dispatch = useDispatch();\n  dispatch(changeFilterAction(''));\n\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <PhonebookForm />\n      <h2>Contacts</h2>\n      <PhonebookFilter />\n      <PhonebookList recent />\n    </>\n  );\n};\n\nexport default Home;\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst selectFilter = state => state.filter;\n\nconst selectContacts = state => state.contacts;\n\nconst selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  ({ contacts }, filter) =>\n    contacts.filter(({ name, phone }) => {\n      if (filter) {\n        return (\n          name.toLowerCase().includes(filter.toLowerCase()) ||\n          phone.includes(filter)\n        );\n      }\n      return true;\n    })\n);\n\nconst selectIsLoadingContacts = state => state.contacts.isLoading;\n\nconst selectErrorContacts = state => state.contacts.error;\n\nexport {\n  selectFilter,\n  selectContacts,\n  selectVisibleContacts,\n  selectErrorContacts,\n  selectIsLoadingContacts,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterForm\":\"Phonebook_filterForm__X+vXc\",\"contactsList\":\"Phonebook_contactsList__CiGrI\"};"],"names":["PhonebookFilter","dispatch","useDispatch","_jsxs","className","styles","children","_jsx","htmlFor","type","name","id","onChange","debounce","e","value","target","changeFilterAction","handleChange","autoComplete","_ref","contact","phone","onClick","deleteContact","deleteContactThunk","visibleContacts","recent","arguments","length","undefined","sliceLength","slice","map","ContactsItem","PhonebookList","useSelector","selectVisibleContacts","filter","selectFilter","isLoading","selectIsLoadingContacts","error","selectErrorContacts","_Fragment","visibleContactsMap","PhonebookForm","contacts","selectContacts","onSubmit","preventDefault","form","number","phoneClear","replace","Notiflix","every","el","Number","reset","newContact","addContactThunk","required","Home","state","createSelector","_ref2","toLowerCase","includes"],"sourceRoot":""}